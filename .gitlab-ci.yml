
stages:
  - test
  - publish
  - deploy

.meltano:
  image: python:3.8
  before_script:
  - cd data/
  - pip3 install meltano

##########################
# Testing
##########################

sqlfluff:
  extends:
  - .meltano
  stage: test
  script:
  - meltano install utilities sqlfluff
  - meltano invoke sqlfluff lint -v
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if:  $CI_COMMIT_BRANCH == "deploy"
    when: never
  - when: always

##########################
# Daily data pipeline
##########################

hub-metrics-prod:
  extends:
  - .meltano
  variables:
    STAGE: prod
    JOB_ID: HUB-METRICS-PROD
  stage: deploy
  needs: []
  script:
  - meltano install
  - echo "Installing creds file from CI..." && cp $MELTANO_ENV_FILE .env
  - meltano --environment=prod elt tap-google-analytics target-athena --job_id=ga_athena_$JOB_ID
  - meltano --environment=prod invoke dbt:run --models marts.publish.meltano_hub.*
  - meltano --environment=prod elt tap-athena-metrics target-yaml-metrics
  - meltano --environment=prod elt tap-athena-audit target-yaml-audit
  - meltano --environment=prod invoke awscli s3 cp audit.yml $HUB_METRICS_S3_PATH
  - meltano --environment=prod invoke awscli s3 cp metrics.yml $HUB_METRICS_S3_PATH
  rules:
  - if: $CI_COMMIT_BRANCH == "main"
    when: always
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: always

# Build & Publish Docker Images
docker-build-publish:
  stage: publish
  variables:
    DOCKER_REGISTRY: 158444585956.dkr.ecr.us-east-1.amazonaws.com
    AWS_DEFAULT_REGION: us-east-1
    DOCKER_HOST: tcp://docker:2375
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
  - docker:dind
  before_script:
  - echo "before_script started.."
  - amazon-linux-extras install docker
  - aws --version
  - docker --version
  - echo "before_script done ✅"
  script:
  - echo "script started.."
  # Login to AWS
  - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  # Build and Publish Meltano Image
  - docker build -t $DOCKER_REGISTRY/m5o-prod-meltano:$CI_PIPELINE_IID -f deploy/meltano/data/meltano/Dockerfile data/
  - docker push $DOCKER_REGISTRY/m5o-prod-meltano:$CI_PIPELINE_IID
  # Build and Publish Airflow Image
  - docker build -t $DOCKER_REGISTRY/m5o-prod-airflow:$CI_PIPELINE_IID -f deploy/meltano/data/airflow/Dockerfile data/
  - docker push $DOCKER_REGISTRY/m5o-prod-airflow:$CI_PIPELINE_IID
  - echo "script done ✅"
  rules:
  - if: $CI_COMMIT_BRANCH == "deploy"
    when: always
